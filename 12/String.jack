// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {
    field Array str;
    field int length, max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let max = maxLength; 

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max) {
            do setCharAt(length, c);
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d, sign;
        let val = 0;
        let i = 0;

        if (charAt(i) = 45) { // if the first character is a negative sign
            let sign = charAt(i);
            let i = i + 1;
        }

        while (i < length) {
            if ((charAt(i) > 47) & (charAt(i) < 57)) {
                let d = charAt(i) - 48;
                let val = (val * 10) + d;
                let i = i + 1;
            }
        }

        if (sign = 45) {
            let val = -val;
        }

        return val;
    }

    // A helper function for setInt so the length is not reset everytime in order to account for the negative sign
    method void setIntHelper(int val) {
        var int lastDigit, c, n;

        let n = val / 10;
        let lastDigit = val - (n * 10); // x % 10
        let c = lastDigit + 48;

        if ((val < 10) & (val > 0)) {
            do appendChar(c);
        }
        else {
            do setIntHelper(n);
            do appendChar(c);
        }

        return;
    }

    // int to string
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45); // append negative sign if number is negative
        }
        do setIntHelper(val);

        return; 
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
