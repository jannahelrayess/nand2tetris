/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //First Mux logic 
    Not(in=instruction[15], out=Not15);
    Mux16(a=instruction, b=outMCopy, sel=instruction[15], out=ARegIn);

    //Load to A Register 
    Or(a=Not15, b=instruction[5], out=LoadAReg);
    ARegister(in=ARegIn, load=LoadAReg, out=ARegOut, out[0..14]=addressM);

    //Second Mux logic
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=AMuxOut);
    
    //Load to D Register
    And(a=instruction[4], b=instruction[15], out=DRegLoad);
    DRegister(in=outMCopy, load=DRegLoad, out=DRegOut);

    //ALU
    ALU(x=DRegOut, y=AMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outMCopy, zr=zr, ng=ng);

    //Jump cases for load in PC
    //j1 and ng == 1, jump
    And(a=instruction[2], b=ng, out=LT);
    
    //j2 and zr == 1, jump 
    And(a=instruction[1], b=zr, out=EQ);
    
    //j3 == 1, ng and zr == 0, jump 
    Or(a=ng, b=zr, out=OrNgZr);
    Not(in=OrNgZr, out=NorNgZr);
    And(a=instruction[0], b=NorNgZr, out=GT);

    //Or-ing all possible jump cases
    Or(a=LT, b=EQ, out=OrFirst);
    Or(a=OrFirst, b=GT, out=jump);

    //Making sure there is a jump and a C-instruction
    And(a=jump, b=instruction[15], out=finaljump);

    //Inc case for PC
    Not(in=finaljump, out=NotJump);

    //PC
    PC(in=ARegOut, load=finaljump, inc=NotJump, reset=reset, out[0..14]=pc);

    //Write to M?
    And(a=instruction[15], b=instruction[3], out=writeM);
}