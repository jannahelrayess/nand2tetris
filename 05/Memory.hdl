/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //Choose which register to store the value to
    DMux4Way(in=load, sel=address[13..14], a=DmRAM1, b=DmRAM2, c=DmScreen, d=DmKBD);

    //Accounting for both possible RAM options and save value into the RAM16 register
    Or(a=DmRAM1, b=DmRAM2, out=DmRAM);
    RAM16K(in=in, load=DmRAM, address=address[0..13], out=OutRAM);

    //Store value into the Screen register
    Screen(in=in, load=DmScreen, address=address[0..12], out=OutScreen);

    //Store the value in the keyboard register
    Keyboard(out=OutKBD);

    //Output the value that was stored
    Mux4Way16(a=OutRAM, b=OutRAM, c=OutScreen, d=OutKBD, sel=address[13..14], out=out);
}